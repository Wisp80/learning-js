'use strict';

/*-------------------------------------------------------------------------------------------------------------------*/

/*Нельзя использовать отрицательные индексы в массивах.*/
let array1 = [1, 2, 3];
console.log(array1[-1]); // undefined

/*Метод массивов "at()" позволяет получить какой-то элемент массива, при этом можно использовать отрицательный 
индексы.*/
console.log(array1.at(1)); // 2
console.log(array1.at(-1)); // 3
console.log(array1.at(-2)); // 2

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Массивы могут применятся как очередь. Можно удалять массивы как в конце, так и в начале массива, то есть можем
использовать массивы как двустороннюю очередь.*/

/*Метод "pop()" удаляет последний элемент из массива и возвращает его.*/
let array2 = [1, 2, 3];
console.log(array2.pop()); // 3
console.log(array2); // [1, 2]
console.log(array2.pop()); // 2
console.log(array2.pop()); // 1
console.log(array2); // []
console.log(array2.pop()); // undefined
console.log(array2); // []

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "push()" добавляет элементы в конец массива и возвращает новую длинну массива.*/
let array3 = [1, 2, 3];
console.log(array3.push(4)); // 4
console.log(array3); // [1, 2, 3, 4]
console.log(array3.push(5, 6)); // 6
console.log(array3); // [1, 2, 3, 4, 5, 6]
console.log(array3.push(17, 18)); // 8
console.log(array3); // [1, 2, 3, 4, 5, 6, 17, 18]

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "shift()" удаляет из массива первый элемент и возвращает его.*/
let array4 = [1, 2, 3];
console.log(array4.shift()); // 1
console.log(array4); // [2, 3]
console.log(array4.shift()); // 2
console.log(array4.shift()); // 3
console.log(array4); // []
console.log(array4.shift()); // undefined
console.log(array4); // []

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "unshift()" добавляет элементы в начало массива и возвращает новую длинну массива.*/
let array5 = [1, 2, 3];
console.log(array5.unshift(4)); // 4
console.log(array5); // [4, 1, 2, 3]
console.log(array5.unshift(6, 5)); // 6
console.log(array5); // [6, 5, 4, 1, 2, 3]

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Массив это подвид объектов, где в квадратных скобках вместо ключа используется индекс элемента. Движок JavaScript 
старается хранить элементы массива в непрерывной области памяти, один за другим. Существуют и другие способы 
оптимизации, благодаря которым массивы работают очень быстро. Но их эффективность падает если использовать массивы как
объекты.*/

let array6 = [1, 2, 3];
array6[999999] = 4;
console.log(array6); // a lot of empty slots
console.log(array6.length); // 1000000

/*Методы "push()" и "pop()" выполняются быстро, а методы "shift()" и "unshift()" – медленно. Поскольку методы "push()" 
и "pop()" работают с концом массива, то нет необходимости менять индексы у других элементов, в отличии от методов 
"shift()" и "unshift()", когда происходит смещение всех элементов. Все четыре метода в конце работы обновляют свойство
"length".*/

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Массив можно перебрать при помощи "for..of".*/
let array7 = ['a', 'b', 'c'];

for (let element of array7) {
    console.log(element);
}

/*Поскольку массив является объектом, то можно массив перебрать при помощи "for..in". Но на самом деле это плохая 
идея так, как цикл "for..in" выполняет перебор всех свойств объекта, а не только цифровых, что может привести к тому,
что в некоторых ситуациях "псевдомассивы", то есть объекты, которые выглядят, как массив, будут выводить дополнительные 
нечисловые свойства и методы, которые нам обычно не нужны. Также цикл for..in оптимизирован под произвольные объекты, 
а не массивы, и поэтому этот цикл может работать в 10-100 раз медленнее.*/
for (let index in array7) {
    console.log(array7[index]);
}

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Свойство "length" это наибольший индекс массива плюс один. Это свойство можно перезаписать.*/
let array8 = [1, 2, 3, 4, 5, 6, 7];

array8.length = 8;
console.log(array8); // added an empty slot
console.log(array8.length); // 8
array8.length++;
console.log(array8); // added an empty slot
console.log(array8.length); // 9

array8.length = 8;
console.log(array8); // removed one element
console.log(array8.length); // 8
array8.length--;
console.log(array8); // removed one element
console.log(array8.length); // 7

array8.length = 0;
console.log(array8); // array is empty
console.log(array8.length); // 0

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*При помощи "new Array()" можно создавать массивы, при этом если указать только один числовой параметр, то будет
создат пустой массив указанной длинны.*/
let array9 = new Array(1, 2, 3);
console.log(array9); // [1, 2, 3]

let array10 = new Array(2);
console.log(array10); // [2 empty slots]

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Массивы по-своему реализуют метод "toString()", который возвращает список элементов, разделенных запятыми.*/
let array11 = [1, 2, 3];
console.log(String(array11)); // '1,2,3'
console.log(array11.toString()); // '1,2,3'

/*Массивы не имеют ни "Symbol.toPrimitive", ни функционирующего "valueOf()", они реализуют только преобразование 
"toString()".*/
console.log([] + 1); // '' + 1 = '1'
console.log([1] + 1); // '1' + 1 = '11'
console.log([1, 2] + 1); // '1,2' + 1 = '1,21'

console.log('' + 1); // '1'
console.log('1' + 1); // '11'
console.log('1,2' + 1); // '1,21'

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

console.log(Boolean([])); // true
console.log(Number([])); // 0
console.log(String([])); // ''

console.log(true == []); // false
console.log(0 == []); // true
console.log('0' == []); // false

console.log(Object.is(true, [])); // false
console.log(Object.is(0, [])); // false
console.log(Object.is('0', [])); // false

console.log(0 == ''); // true, 0 == 0