'use strict';

/*-------------------------------------------------------------------------------------------------------------*/

/*Далее объекты автоматически преобразуются в примитивы.*/
console.log({} - {}); // NaN
console.log({} + {}); // '[object Object][object Object]'

/*В логическом контексте все объекты это true. Хотя объекты не могут преобразовываться к логическому типу, 
только к числу или строке. К числу объекты преобразуются, когда мы вычитаем объекты или применяем математические 
функции. Преобразование объекта к строке происходит, например, когда мы используем функцию "alert()". Существует 
три варианта преобразования типов, которые происходят в различных ситуациях. Они называются "хинтами".*/

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------*/

/*Примеры преобразования объектов к строке. Хинт "string".*/

// alert({}); // '[object Object]'

let obj1 = {};
obj1[{a: 1}] = 123; // используем объект в качестве ключа
console.log(obj1); // Object { "[object Object]": 123 }

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------*/

/*Примеры преобразования объектов к числу. Хинт "number".*/

let num1 = Number({});
console.log(num1); // NaN

let num2 = +{};
console.log(num2); // NaN

let date1 = new Date;
let date2 = new Date;
let delta1 = date1 - date2;
console.log(delta1); // 0

let obj0 = {};
let obj00 = {a: 1};
console.log(obj0 > obj00); // false
console.log(obj0 < obj00); // false
console.log(++obj0); // NaN
console.log(obj0++); // NaN

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------*/

/*Есть еще хинт "default". Происходит редко, когда оператор не может понять, какой тип ожидать. Например, 
бинарный плюс + может работать как со строками (объединяя их в одну), так и с числами (складывая их). Поэтому, 
если бинарный плюс получает объект в качестве аргумента, он использует хинт "default" для его преобразования. 
Также, если объект сравнивается с помощью == со строкой, числом или символом, тоже неясно, какое преобразование 
следует выполнить, поэтому используется хинт "default".*/

console.log({} + {}); // '[object Object][object Object]'
console.log({} == '123'); // false
console.log({} == 123); // false
console.log({} == Symbol()); // false

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------*/

/*Чтобы выполнить преобразование, JavaScript пытается найти и вызвать три следующих метода объекта:
1) Вызвать "obj[Symbol.toPrimitive](hint)" – метод с символьным ключом "Symbol.toPrimitive" (системный символ), 
если такой метод существует.
2) Иначе, если хинт равен "string", то попробовать вызвать "obj.toString()", а если он не существует или 
возвращает объект вместо примитивного значенияили, то попробовать вызвать "obj.valueOf()" если он существует.
3) Иначе, если хинт равен "number" или "default", то попробовать вызвать "obj.valueOf()", а если он не существует 
или возвращает объект вместо примитивного значения или, то попробовать вызвать "obj.toString()"если он 
существует.*/

/*Есть встроенный символ с именем "Symbol.toPrimitive", который следует использовать для обозначения метода 
преобразования. Если метод "Symbol.toPrimitive" существует, он используется для всех хинтов, и больше никаких 
методов не требуется.*/

let obj2 = {
    a: 'Ok',
    b: 10,

    [Symbol.toPrimitive](hint) {
        alert(`hint: ${hint}`);

        return hint == "string" ? `{a: "${this.a}"}` : this.b;
    }
};

// alert(obj2); // hint: string -> {a: "Ok"}
// alert(+obj2); // hint: number -> 10
// alert(obj2 + 500); // hint: default -> 510

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------*/

/*По умолчанию обычный объект имеет следующие методы "toString()" и "valueOf()":
Метод "toString()" возвращает строку "[object Object]".
Метод "valueOf()" возвращает сам объект.*/

let obj3 = {a: '123'};

console.log(obj3.toString()); // [object Object]
console.log(obj3.valueOf() === obj3); // true

let obj4 = {
    a: 'Ok',
    b: 10,

    toString() {
        return `{a: "${this.a}"}`;
    },

    valueOf() {
        return this.b;
    }
};

// alert(obj4); // toString -> {a: "Ok"}
// alert(+obj4); // valueOf -> 10
// alert(obj4 + 500); // valueOf -> 510

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------*/

/*В отсутствие "Symbol.toPrimitive()" и "valueOf()", "toString()" обработает все примитивные преобразования.*/

let obj5 = {
    a: 'Ok',

    toString() {
        return this.a;
    }
};

// alert(obj5); // toString -> 'Ok'
// alert(+obj5); // toString -> undefined + 'Ok' -> NaN
// alert(obj5 + 500); // toString -> 'Ok' + '500' -> 'Ok500'

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------*/

/*Методы "Symbol.toPrimitive()", "valueOf()" и "toString()" должны всегда возвращать примитив.*/

let obj6 = {
    a: "Ok",
    b: 10,

    [Symbol.toPrimitive](hint) {
        return {};
    }
};

// alert(obj6); // Uncaught TypeError: can't convert obj6 to string: its [Symbol.toPrimitive] method returned an object
// alert(+obj6); // Uncaught TypeError: can't convert obj6 to number: its [Symbol.toPrimitive] method returned an object
// alert(obj6 + 500); // Uncaught TypeError: can't convert obj6 to primitive type: its [Symbol.toPrimitive] method returned an object

let obj7 = {
    a: "Ok",
    b: 10,

    toString() {
        return {};
    },

    valueOf() {
        return {};
    }
};

// alert(obj7); // can't convert obj7 to string
// alert(+obj7); // can't convert obj7 to number
// alert(obj7 + 500); // can't convert obj7 to primitive type