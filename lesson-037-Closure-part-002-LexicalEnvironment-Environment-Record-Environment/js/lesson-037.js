'use strict';

/*-------------------------------------------------------------------------------------------------------------------*/

/*В JavaScript у каждой выполняемой функции, блока кода {...} и скрипта есть связанный с ними внутренний (скрытый) 
объект, называемый лексическим окружением "LexicalEnvironment".

Объект лексического окружения состоит из двух частей:
1) "Environment Record" – объект, в котором как свойства хранятся все локальные переменные (а также некоторая другая 
информация, такая как значение this).
2) Ссылка на внешнее лексическое окружение ("LexicalEnvironment") – то есть то, которое соответствует коду снаружи 
(снаружи от текущих фигурных скобок).

Исходя из этого можно сказать, что переменная – это свойство специального внутреннего объекта "LexicalEnvironment", 
связанного с текущим выполняющимся блоком/функцией/скриптом, а работа с переменными – это на самом деле работа со 
свойствами этого объекта.*/

/*При запуске скрипта лексическое окружение предварительно заполняется всеми объявленными переменными. Изначально они 
находятся в состоянии "Uninitialized". Это особое внутреннее состояние, которое означает, что движок знает о 
переменной, но на нее нельзя ссылаться, пока она не будет объявлена с помощью "let/const/var". Это почти то 
же самое, как если бы переменная не существовала.*/

/*-------------------------------------------------------------------------------------------------------------------*/

/*Function Declaration мгновенно инициализируется полностью. Когда создается лексическое окружение, Function 
Declaration сразу же становится функцией, готовой к использованию (в отличие от "let/const/var", который до момента 
объявления не может быть использован из-за состояния "Uninitialized"). Именно поэтому мы можем вызвать функцию, 
объявленную как Function Declaration, до самого ее объявления.*/

/*Когда запускается функция, в начале ее вызова автоматически создается новое лексическое окружение для хранения 
локальных переменных и параметров вызова.*/

/*Когда код хочет получить доступ к переменной – сначала происходит поиск во внутреннем лексическом окружении, затем во 
внешнем, затем в следующем и так далее, до глобального.*/

/*-------------------------------------------------------------------------------------------------------------------*/

/*Если переменная не была найдена, это будет ошибкой в строгом режиме (use strict). Без строгого режима, для обратной 
совместимости, присваивание несуществующей переменной создаёт новую глобальную переменную с таким же именем.*/

// a = 1;
// console.log(a);

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Все функции помнят лексическое окружение, в котором они были созданы. Все функции имеют скрытое свойство 
"[[Environment]]", которое хранит ссылку на лексическое окружение, в котором была создана функция. Ссылка на 
"[[Environment]]" устанавливается один раз и навсегда при создании функции.*/

function makeCounter() {
    let count = 0;

    return function () {
        return count++;
    };
};

let counter = makeCounter();
// "[[Environment]]" of counter = -> "LexicalEnvironment" of makeCounter
// "LexicalEnvironment" of counter = "Environment Record": [] | -> "LexicalEnvironment" of makeCounter

// "[[Environment]]" of makeCounter = -> Global "LexicalEnvironment"
// "LexicalEnvironment" of makeCounter = "Environment Record": [count: 0] | -> Gobal "LexicalEnvironment"

console.log(counter()); // 0
console.log(counter()); // 1
console.log(counter()); // 2

/*Замыкание – это функция, которая запоминает свои внешние переменные и может получить к ним доступ. В JavaScript, все 
функции изначально являются замыканиями (есть только одно исключение в синтаксисе "new Function"). То есть они 
автоматически запоминают, где были созданы, с помощью скрытого свойства "[[Environment]]", и все они могут получить 
доступ к внешним переменным.*/

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Обычно лексическое окружение удаляется из памяти вместе со всеми переменными после завершения вызова функции. Это 
связано с тем, что на него нет ссылок. Как и любой объект JavaScript, оно хранится в памяти только до тех пор, пока к 
нему можно обратиться. Однако если существует вложенная функция, которая все еще доступна после завершения функции, то 
она имеет свойство "[[Environment]]", ссылающееся на лексическое окружение. В этом случае лексическое окружение 
остается доступным даже после завершения работы функции.*/

/*-------------------------------------------------------------------------------------------------------------------*/

/*На практике движки JavaScript пытаются оптимизировать использование "[[Environment]]". Они анализируют использование 
переменных и, если легко по коду понять, что внешняя переменная не используется – она удаляется. Одним из важных 
побочных эффектов в V8 (Chrome, Edge, Opera) является то, что такая переменная становится недоступной при отладке. Если
запустить код ниже и во время остановки написать "console.log(value)", то мы получим ответ, что такой переменной нет. 
В теории, она должна быть доступна, но попала под оптимизацию движка.*/

function f() {
    let value = Math.random();

    function g() {
        debugger; // в консоли: напишите console.log(value);
    };

    return g;
};

let g = f();
g();