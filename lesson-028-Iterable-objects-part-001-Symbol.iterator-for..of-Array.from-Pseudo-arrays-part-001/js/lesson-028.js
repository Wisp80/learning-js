'use strict';

/*-------------------------------------------------------------------------------------------------------------*/

/*–ü–µ—Ä–µ–±–∏—Ä–∞–µ–º—ã–µ (–∏–ª–∏ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–µ) –æ–±—ä–µ–∫—Ç—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ü–∏–∫–ª–µ "for..of". –°—Ç—Ä–æ–∫–∏ —Ç–∞–∫–∂–µ —è–≤–ª—è—é—Ç—Å—è –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º—ã–º–∏
–æ–±—ä–µ–∫—Ç–∞–º–∏.*/

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------*/

/*–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ–º—É –º–µ—Ç–æ–¥ –ø–æ–¥ —Å–≤–æ–π—Å—Ç–≤–æ–º –≤ –≤–∏–¥–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ 
"[Symbol.iterator]". –ö–æ–≥–¥–∞ —Ü–∏–∫–ª "for..of" –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ–¥–∏–Ω —Ä–∞–∑ –∏–ª–∏ –∂–µ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —ç—Ç–æ—Ç 
–º–µ—Ç–æ–¥ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω. –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä ‚Äì –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–æ–º "next()". –î–∞–ª—å—à–µ —Ü–∏–∫–ª "for..of" —Ä–∞–±–æ—Ç–∞–µ—Ç 
—Ç–æ–ª—å–∫–æ —Å —ç—Ç–∏–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º. –ö–æ–≥–¥–∞ —Ü–∏–∫–ª "for..of" —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ 
"next()" —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–∞ "next()" –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–∏–¥: "{done: Boolean, value: any}", –≥–¥–µ 
—Å–≤–æ–π—Å—Ç–≤–æ "done" —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º "true" –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ —Å–≤–æ–π—Å—Ç–≤–æ "value" —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—á–µ—Ä–µ–¥–Ω–æ–µ 
–∑–Ω–∞—á–µ–Ω–∏–µ.*/
let obj1 = {
    a: 1,
    b: 4
};

obj1[Symbol.iterator] = function () {
    return {
        current: this.a,
        last: this.b,

        next() {
            if (this.current <= this.last) {
                return {done: false, value: this.current++};
            } else {
                return {done: true};
            }
        }
    };
};

for (const num of obj1) {
    console.log(num); // 1 => 2 => 3 => 4
}

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –º–µ—Ç–æ–¥ "next()" –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤ —Å–∞–º–æ–º –æ–±—ä–µ–∫—Ç–µ, –Ω–æ —Ç–æ–≥–¥–∞ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –≤ –¥–≤—É—Ö 
–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Ü–∏–∫–ª–∞—Ö "for..of", —Ç–∞–∫ –∫–∞–∫ —É –Ω–∏—Ö –±—É–¥–µ—Ç –æ–±—â–µ–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–µ–ø–µ—Ä—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏—à—å 
–æ–¥–∏–Ω –∏—Ç–µ—Ä–∞—Ç–æ—Ä ‚Äì —Å–∞–º –æ–±—ä–µ–∫—Ç.*/

// let obj2 = {
//     a: 5,
//     b: 8,

//     [Symbol.iterator]: function () {
//         return {
//             current: this.a,
//             last: this.b,

//             next() {
//                 if (this.current <= this.last) {
//                     return {done: false, value: this.current++};
//                 } else {
//                     return {done: true};
//                 }
//             }
//         };
//     }
// };

let obj2 = {
    a: 5,
    b: 8,

    [Symbol.iterator]() {
        this.current = this.a;
        return this;
    },

    next() {
        if (this.current <= this.b) {
            return {done: false, value: this.current++};
        } else {
            return {done: true};
        }
    }
};

for (const num of obj2) {
    console.log(`------ OUTER ${num}`); // 5
    console.log(obj2.current); // 6

    for (const num of obj2) {
        console.log(`inner ${num}`); // 5 => 6 => 7 => 8
        console.log(obj2.current); // 6 => 7 => 8 => 9
    }
}

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*–ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É—è "Infinity". –ò–ª–∏ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π 
–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª. –ú–µ—Ç–æ–¥ next –Ω–µ –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ —ç—Ç–æ–º –ø–ª–∞–Ω–µ. 
–í—Å–µ–≥–¥–∞ –º–æ–∂–µ–º –ø—Ä–µ—Ä–≤–∞—Ç—å —Ü–∏–∫–ª, –∏—Å–ø–æ–ª—å–∑—É—è "break".*/

/*-------------------------------------------------------------------------------------------------------------*/

/*–°–¥–µ–ª–∞–µ–º —è–≤–Ω—ã–π –≤—ã–∑–æ–≤ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞. –¢–∞–∫–æ–π —è–≤–Ω—ã–π –≤—ã–∑–æ–≤ –º–æ–∂–µ—Ç –ø–æ–∑–≤–æ–ª–∏—Ç—å –Ω–∞–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏—Ç–µ—Ä–∞—Ü–∏–∏.*/
let string1 = 'ABCDE';
let iterator1 = string1[Symbol.iterator]();
console.log(iterator1);

while (true) {
    let result = iterator1.next();

    console.log(result);

    if (result.done) break;
}

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------*/

/*–ò—Ç–µ—Ä–∏—Ä—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã ‚Äì —ç—Ç–æ –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª–∏–∑—É—é—Ç –º–µ—Ç–æ–¥ "Symbol.iterator". –ü—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤—ã ‚Äì —ç—Ç–æ –æ–±—ä–µ–∫—Ç—ã, —É 
–∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∏–Ω–¥–µ–∫—Å—ã –∏ —Å–≤–æ–π—Å—Ç–≤–æ "length", —Ç–æ –µ—Å—Ç—å, –æ–Ω–∏ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –º–∞—Å—Å–∏–≤—ã. –°—Ç—Ä–æ–∫–∏ —ç—Ç–æ –∏ —Ç–æ –∏ —Ç–æ. –û–±—ä–µ–∫—Ç—ã –≤—ã—à–µ 
—ç—Ç–æ —Ç–æ–ª—å–∫–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç—ã, –Ω–æ –Ω–µ –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤—ã. –ù–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤–æ–º, 
–Ω–æ –µ–≥–æ –Ω–µ–ª—å–∑—è –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å.*/
let obj3 = {
    0: 'a',
    1: 'b',
    length: 2
};

// for (const e of obj3) { console.log(e) }; // TypeError: obj3 is not iterable

/*-------------------------------------------------------------------------------------------------------------*/

/*–ò –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã, –∏ –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤—ã ‚Äì —ç—Ç–æ –æ–±—ã—á–Ω–æ –Ω–µ –º–∞—Å—Å–∏–≤—ã, —É –Ω–∏—Ö –Ω–µ—Ç –º–µ—Ç–æ–¥–æ–≤ "push()", "pop()" –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ. 
–ù–æ –µ—Å—Ç—å –º–µ—Ç–æ–¥ "Array.from()", –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤ –∏ –¥–µ–ª–∞–µ—Ç –∏–∑ –Ω–µ–≥–æ ¬´–Ω–∞—Å—Ç–æ—è—â–∏–π¬ª 
–º–∞—Å—Å–∏–≤.*/
let obj4 = {
    0: 'a',
    1: 'b',
    length: 2
};

let array1 = Array.from(obj4);
console.log(array1); // [ "a", "b" ]
console.log(array1.pop()); // 'b'

let obj5 = {
    a: 1,
    b: 4
};

obj5[Symbol.iterator] = function () {
    return {
        current: this.a,
        last: this.b,

        next() {
            if (this.current <= this.last) {
                return {done: false, value: this.current++};
            } else {
                return {done: true};
            }
        }
    };
};

let array2 = Array.from(obj5);
console.log(array2); // [ 1, 2, 3, 4 ]
console.log(array2.pop()); // 4

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------*/

/*–ü–æ–ª–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –º–µ—Ç–æ–¥–∞ "Array.from()" –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–∫–∞–∑–∞—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é "—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É—é—â—É—é" —Ñ—É–Ω–∫—Ü–∏—é:
"Array.from(obj[, mapFn, thisArg])". –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏–µ–π, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ 
–∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –º–∞—Å—Å–∏–≤, –∞ "thisArg" –ø–æ–∑–≤–æ–ª—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å "this" –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.*/
let array3 = Array.from(obj5, num => num * num);

console.log(array3); // [ 1, 4, 9, 16 ]

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------*/

/*–ü—Ä–µ–≤—Ä–∞—Ç–∏–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤.*/
let string2 = 'ABCDE';
let array4 = Array.from(string2);
console.log(array4); // [ "A", "B", "C", "D", "E" ]

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------*/

/*–°—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã —ç—Ç–æ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –¥–≤—É–º—è 16-–±–∏—Ç–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –ø–æ—ç—Ç–æ–º—É –∏—Ö –¥–ª–∏–Ω–∞ 2. –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å 
—Å–≤–æ—é –≤–µ—Ä—Å–∏—é –º–µ—Ç–æ–¥–∞ "slice()", –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏.*/
function slice(str, start, end) {
    return Array.from(str).slice(start, end).join('');
};

let string3 = 'ùí≥üòÇ©∑∂';
console.log(string3.length); // 6
console.log(Array.from(string3)); // [ "ùí≥", "üòÇ", "©∑∂" ]
console.log(slice(string3, 1, 3)); // üòÇ©∑∂
console.log(string3.slice(1, 3)); // ÔøΩÔøΩ (–¥–≤–µ —á–∞—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã—Ö –ø–∞—Ä)
console.log(string3.slice(2, 4)); // üòÇ
console.log(string3.slice(2, 7)); // üòÇ©∑∂

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------*/

/*–°–¥–µ–ª–∞–µ–º –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤.*/
let obj6 = {
    0: 'A',
    1: 'B',
    2: function () {
        console.log(this)
    },

    length: 3,

    [Symbol.iterator]: function () {
        this.i = 0;
        console.log(this === obj6); // —Å–∞–º –æ–±—ä–µ–∫—Ç "obj6".
        console.log(this);
        return this;
    },

    next: function () {
        console.log(this === obj6); // true

        if (this.i < this.length) {
            return {done: false, value: this[this.i++]};
        } else {
            return {done: true};
        }
    }
};

obj6['3'] = 'C';
obj6.length++;

for (const value of obj6) {
    console.log(value); // 'A' => 'B' => function 2() => 'C'
}