'use strict';

/*-------------------------------------------------------------------------------------------------------------*/

/*Перебираемые (или итерируемые) объекты можно использовать в цикле "for..of". Строки также являются перебираемыми
объектами.*/

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------*/

/*Чтобы сделать объект итерируемым нужно добавить ему метод под свойством в виде специального встроенного символа 
"[Symbol.iterator]". Когда цикл "for..of" запускается, он вызывает этот метод один раз или же выдает ошибку, если этот 
метод не был найден. Этот метод должен вернуть итератор – объект с методом "next()". Дальше цикл "for..of" работает 
только с этим возвращенным объектом. Когда цикл "for..of" хочет получить следующее значение, он вызывает метод 
"next()" этого объекта. Результат вызова метода "next()" должен иметь вид: "{done: Boolean, value: any}", где 
свойство "done" со значением "true" означает, что цикл завершен, в противном случае свойство "value" содержит очередное 
значение.*/
let obj1 = {
    a: 1,
    b: 4
};

obj1[Symbol.iterator] = function () {
    return {
        current: this.a,
        last: this.b,

        next() {
            if (this.current <= this.last) {
                return {done: false, value: this.current++};
            } else {
                return {done: true};
            }
        }
    };
};

for (const num of obj1) {
    console.log(num); // 1 => 2 => 3 => 4
}

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------*/