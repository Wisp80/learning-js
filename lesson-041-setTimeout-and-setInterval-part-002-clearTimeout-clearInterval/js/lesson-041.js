'use strict';

/*-------------------------------------------------------------------------------------------------------------------*/

/*Методы "setTimeout()" и "setInterval()" не являются частью спецификации JavaScript. Но большинство сред выполнения 
JS-кода имеют внутренний планировщик и предоставляют доступ к этим методам.*/

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "setTimeout()" первым параметром принимает функции или строку кода для выполнения, вторым параметром задержку
в миллисекундах, а следующими параметрами принимает параметры для функции. Если первый аргумент является строкой, то 
JavaScript создаст из нее функцию.*/

/*Вызов метода "setTimeout()" возвращает идентификатор таймера "timerId", который можно использовать для отмены 
дальнейшего выполнения.*/
let setTimeoutID01 = setTimeout(function () { console.log(arguments[0]); }, 100, 123);
console.log(setTimeoutID01);
clearTimeout(setTimeoutID01);

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "setInterval()" имеет такой же синтаксис как  метод "setTimeout()".*/

/*Вызов метода "setInterval()" возвращает идентификатор таймера "timerId", который также можно использовать для отмены 
дальнейшего выполнения при помощи методе "clearInterval()". Нужно помнить, что в большинстве браузеров, включая Chrome 
и Firefox, внутренний счетчик продолжает тикать во время показа "alert()"/"confirm()"/"prompt()".*/

/*-------------------------------------------------------------------------------------------------------------------*/

/*Вложенный метод "setTimeout()" позволяет запускать какой-то код регулярно.*/
// let setTimeoutID02 = setTimeout(
//     function tick() {
//         console.log('tick');
//         setTimeoutID02 = setTimeout(tick, 1000); // (*)
//     },

//     1000);

/*Реальная задержка между вызовами функции с помощью метода "setInterval()" меньше, чем указано в коде, так как время, 
затраченное на выполнение функции, использует часть заданного интервала времени. Вложенный метод "setTimeout()" 
гарантирует фиксированную задержку, так как новый вызов планируется в конце предыдущего.*/

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Когда функция передается в методы "setInterval()"/"setTimeout()", на нее создаётся внутренняя ссылка и сохраняется в 
планировщике. Это предотвращает попадание функции в сборщик мусора, даже если на нее нет других ссылок. Для метода 
"setInterval()" функция остается в памяти до тех пор, пока не будет вызван метода "clearInterval()". 

Есть и побочный эффект. Функция ссылается на внешнее лексическое окружение, поэтому пока она существует, внешние 
переменные существуют тоже. Они могут занимать больше памяти, чем сама функция. Поэтому, если регулярный вызов функции 
больше не нужен, то лучше отменить его, даже если функция очень маленькая.*/

/*В браузере есть ограничение на то, как часто внутренние счетчики могут выполняться. В стандарте HTML5 говорится: 
"после пяти вложенных таймеров интервал должен составлять не менее четырех миллисекунд". Этого ограничения нет в 
серверном JavaScript. Там есть и другие способы планирования асинхронных задач. Например, метод "setImmediate" для 
Node.js. Так что это ограничение относится только к браузерам.*/