'use strict';

/*-------------------------------------------------------------------------------------------------------------*/

/*Infinity представляет собой математическую бесконечность ∞.*/

console.log(1 / 0); // Infinity
console.log(Infinity); // infinity

/*NaN означает вычислительную ошибку.*/

console.log('string' / 2); // NaN
console.log(NaN); // NaN
console.log(NaN ** 0); // 1, "**" - возведение в степень

/*-------------------------------------------------------------------------------------------------------------*/

/*В JS тип "number" не может безопасно работать с числами, большими, чем (2 в степени 53 -1) 
(т. е. 9007199254740991) или меньшими, чем -(2 в степение 53 -1) для отрицательных чисел.*/

/*Тип "BigInt" был добавлен в JS, чтобы дать возможность работать с целыми числами произвольной длины.
Чтобы создать значение типа "BigInt", необходимо добавить "n" в конец числового литерала.*/

let bigInt = 1234567890123456789012345678901234567890n;
console.log(++bigInt);

/*-------------------------------------------------------------------------------------------------------------*/

/*В JS "null" не является "ссылкой на несуществующий объект" или "нулевым указателем", как в некоторых других 
языках. Это просто специальное значение, которое представляет собой "ничего", "пусто" или "значение 
неизвестно".*/

/*-------------------------------------------------------------------------------------------------------------*/

/*Примитивные типы данных, такие как числа или строки, сравниваются по значению.*/
let b = 2;
let f = 2;
console.log(b); // 2
console.log(2); // 2
console.log(b === 2); // true
console.log(2 === b); // true
console.log(f === b); // true

/*Ссылочные типы данных, такие как объекты и массивы, сравниваются по ссылке.*/
let a = { c: 2 };
let g = { c: 2 };
console.log(a); // { c: 2 }
console.log({ c: 2 }); // { c: 2 }
console.log(a === { c: 2 }); // false
console.log({ c: 2 } === a); // false
let r = a; // Оба объекта ссылаются на одну и туже область памяти
console.log(r); // { c: 2 }
console.log(a === r); // true
r.c = 4;
console.log(r); // { c: 4 }
console.log(a); // { c: 4 }
console.log(a === r); // true

let o = { c: 4, d: 4, i: [1, 2] };
console.log(a.c === o.c); // true
a.i = [1, 2];
console.log(a.i === o.i); // false

let p = [2];
a.u = p;
o.k = p;
console.log(a.u === o.k); // true

/*-------------------------------------------------------------------------------------------------------------*/

/*Метод "typeof()" может определить тип данных.*/

console.log(typeof (null)); // Oфициально признанная ошибка.

/*-------------------------------------------------------------------------------------------------------------*/

/*Тип "symbol" (символ) используется для создания уникальных идентификаторов в объектах.*/