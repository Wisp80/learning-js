'use strict';

/*-------------------------------------------------------------------------------------------------------------*/

console.log(4 ** 1 / 2); // Квадратный корень
console.log('1' + '2'); // '12'
console.log('1' + 2); // '12'
console.log(2 + '1'); // '21'
console.log('2' / '1'); // 2
console.log(2 / '1'); // 2
console.log('2' / 1); // 2
console.log('2' - '1'); // 1
console.log(2 - '1'); // 1
console.log('2' - 1); // 1

console.log('--------------------------------------');

/*Унарный оператор "+" ничего не делает с числами, а строки приводит к числам.*/
let a = 1;
console.log(+a); // 1

let b = '1';
console.log(+b); // 1

let c = -1;
console.log(+c); // -1

console.log('--------------------------------------');

let d = 1;
console.log(d += 1); // 2
console.log(d = + 1); // 1, здесь унарный "+"
console.log(d /= 2); // 0.5
console.log(d **= 2); // 0.25

console.log('--------------------------------------');

let e = 1;
console.log(e++); // 1, e = 2
console.log(e--); // 2, e = 1
// console.log(5++); // Error, только для переменных используется
console.log(++e); // 2, e = 2
console.log(e); // 2
console.log(--e); // 1, e = 1
console.log(e); // 1
// console.log((++e)++); // Error, "(++e)" станет числом

console.log('--------------------------------------');

console.log(~true); // -2
console.log(~false); // -1

console.log('--------------------------------------');

let f;
/*Оператор "," предоставляет нам возможность вычислять несколько выражений, разделяя их запятой. 
Каждое выражение выполняется, но возвращается результат только последнего.*/
console.log(f = (1 + 2, 3 + 4)); // 7
console.log(f = 1 + 2, 3 + 4); // 3 7

console.log('--------------------------------------');

"" + 1 + 0 // 1 | '10' S
"" - 1 + 0 // -1 | NaN A
true + false // true | false [1]
6 / "3" // 2 | 2 AS
"2" * "3" // 6 | 6 AS
4 + 5 + "px" // '9px' | '9px' AS
"$" + 4 + 5 // '$45' | '$45' AS
"4" - 2 // 2 | 2 AS
"4px" - 2 // NaN | NaN AS
"  -9  " + 5 // -4 | "  -9  5" S
"  -9  " - 5 // -14 | NaN A
null + 1 // null | NaN [1]
undefined + 1 // undefined | NaN S
" \t \n" - 2 // Nan | NaN [-2]