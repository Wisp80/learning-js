'use strict';

/*-------------------------------------------------------------------------------------------------------------------*/

/*Поскольку массивы являются объектами, то для удаления элементов можно использовать "delete". При этом вместо 
удаленного элемента будет пустой слот и длинна массива не измениться, так как "delete" удаляет значение по ключу, а
не весь элемент.*/
let array1 = [1, 2, 3];
delete array1[1];
console.log(array1); // [1, <1 empty slot>, 3]
console.log(array1.length); // 3

/*Для добавления, удаления и изменения элементов в массиве лучше использовать метод "splice()". Первым параметром
указывается индекс элемента с которого должны начаться изменения. Вторым параметром указывается как много элементов
нужно удалить. Третьим и последующими параметрами указываются элементы, которые должны быть добавлены вместо 
удаленных. В конце работы будет возвращен массив из удаленных элементов. Допускается использование отрицательных
индексов.*/
let array2 = [1, 2, 3, 4, 5];
console.log(array2.splice(1, 1)); // [2]
console.log(array2); // [1, 3, 4, 5]

console.log(array2.splice(1, 2, 6, 7)); // [3, 4]
console.log(array2); // [1, 6, 7, 5 ]

console.log(array2.splice(2, 0, 8, 9)); // []
console.log(array2); // [1, 6, 8, 9, 7, 5]

console.log(array2.at(-1)); // 5
console.log(array2.at(array2.length - 1)); // 5

console.log(array2.splice(-1, 2, 10, 11)); // [5]
console.log(array2); // [1, 6, 8, 9, 7, 10, 11]

console.log(array2.splice(2)); // [8, 9, 7, 10, 11]
console.log(array2); // [1, 6]

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "slice()" возвращает новый массив с указанного начального индекса до указанного конечного индекса (конец не 
включительно) какого-то массива. Допускается использование отрицательных индексов.*/
let array3 = [1, 2, 3, 4, 5];
console.log(array3.slice(1, 3)); // [2, 3]
console.log(array3.slice(1)); // [2, 3, 4, 5]
console.log(array3.slice(-2)); // [4, 5]
console.log(array3.slice(-4, -2)); // [2, 3]
console.log(array3.slice()); // [1, 2, 3, 4, 5]

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "concat()" возвращает новый массив, в который копирует данные из других массивов и дополнительные значения. В
качестве параметров могут приниматься как массивы, так и другие значения.*/
let array4 = [1, 2, 3, 4, 5];
let array5 = [9, 10]
console.log(array4.concat([6, 7])); // [1, 2, 3, 4, 5, 6, 7]
console.log(array4.concat([6, 7], 8)); // [1, 2, 3, 4, 5, 6, 7, 8]
console.log(array4.concat([6, 7], 8, array5)); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
console.log(array4.concat([6, 7], [], {a: 1})); // [1, 2, 3, 4, 5, 6, 7, { a: 1 }]

/*Если использовать массивоподобный объект со специальным свойством "Symbol.isConcatSpreadable", то он обработается
как массив.*/
let arrayLike1 = {
    0: 'a',
    1: 'b',
    [Symbol.isConcatSpreadable]: true,
    length: 2
};

console.log(array4.concat(arrayLike1)); // [1, 2, 3, 4, 5, 'a', 'b']

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "forEach()" позволяет запускать функцию для каждого элемента массива. В запускаем функции может быть до трех
параметров. Первый - элемент массива, второй - его индекс, третий - сам массив. Результат функции, если он есть, 
отбрасывается и игнорируется.*/
let array6 = [1, 2, 3];

array6.forEach(
    (item, index, array) => {
        console.log(item);
        console.log(index);
        console.log(array);

        return 777;
    }
);

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "indexOf()" ищет указанный в первом параметре элемент в массиве, начиная с индекса указанного во втором 
параметре, и возвращает его индекс. Если элемент не найден то вернется -1. Можно использовать только с первым 
параметром.*/
let array7 = [1, 2, 3, 2];
console.log(array7.indexOf(2)); // 1
console.log(array7.indexOf(2, 0)); // 1
console.log(array7.indexOf(2, 2)); // 3
console.log(array7.indexOf(4)); // -1
console.log(array7.indexOf(4, 0)); // -1

/*Метод "includes()" ищет указанный в первом параметре элемент в массиве, начиная с индекса указанного во втором 
параметре, и возвращает true если элемент найден, иначе false. Можно использовать только с первым параметром.*/
console.log(array7.includes(2)); // true
console.log(array7.includes(2, 0)); // true
console.log(array7.includes(2, 2)); // true
console.log(array7.includes(4)); // false
console.log(array7.includes(4, 0)); // false

/*Оба метода "indexOf()" и "includes()" используют строгое сравнение.*/

/*Метод "lastIndexOf()" работает как и метод "indexOf()", только слева направо.*/
console.log(array7.lastIndexOf(2)); // 3
console.log(array7.lastIndexOf(2, 0)); // -1
console.log(array7.lastIndexOf(2, 2)); // 1
console.log(array7.lastIndexOf(4)); // -1
console.log(array7.lastIndexOf(4, 0)); // -1

/*Метод "includes()" правильно обрабатывает NaN, в отличие от методов "indexOf()" и "lastIndexOf()".*/
let array8 = [1, 2, 3, NaN];
console.log(array8.includes(NaN)); // true
console.log(array8.indexOf(NaN)); // -1
console.log(array8.lastIndexOf(NaN)); // -1

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "find()" перебирает массив и ищет элемент в соотвествии с условием в виде указанной функции. Этот метод берет
каждый элемент массива и вызывает с ним в качестве параметра указанную функцию. Если указанная функция возвращает true, 
то поиск прекращается и возвращается найденный элемент, иначе возвращается undefined. Указаннная функция может 
принимать до трех параметров: элемент, индекс элемента и сам массив. */
let array9 = [
    {a: 1},
    {a: 2},
    {a: 3},
    {a: 3},
    {a: 5}
];

let item1 = array9.find(
    (item, index, array) => item.a === 3 && index === 2 && array
);

console.log(item1); // { a: 3 }
console.log(item1 === array9[2]); // true

/*Метод "findIndex()" работает также как и метод "find()", но он возвращает индекс найденного элемента, а не сам
элемент.*/
let index1 = array9.findIndex(
    (item, index, array) => item.a === 3 && index === 2 && array
);

console.log(index1); // 2

/*Метод "findLastIndex()" работает также как и метод "findIndex()", но ищет справа налево.*/
let index2 = array9.findLastIndex(
    (item, index, array) => item.a === 3 && index === 3 && array
);

console.log(index2); // 3

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "filter()" работает также как и метод "find()", только возвращает массив всех найденных элементов.*/
let array10 = [
    {a: 1},
    {a: 2},
    {a: 3},
    {a: 3},
    {a: 5}
];

let items1 = array10.filter(
    (item, index, array) => item.a === 3
);

console.log(items1); // [ { a: 3 }, { a: 3 } ]
console.log(items1[0] === array10[2]); // true
console.log(items1[1] === array10[3]); // true

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "map()" вызывает указанную функцию для каждого элемента массива и формирует новый массив с измененными 
элементами.*/
let array11 = [
    {a: 1},
    {a: 2},
    {a: 3},
    {a: 3},
    {a: 5}
];

// let items2 = array11.map(
//     (item, index, array) => item.a * index * array.length
// );

let items2 = array11.map(
    (item, index, array) => { if (index !== 1) { return item.a * index * array.length } }
);

console.log(items2); // [ 0, undefined, 30, 45, 100 ]
console.log(array11);