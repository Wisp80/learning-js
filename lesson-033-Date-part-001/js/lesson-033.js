'use strict';

/*-------------------------------------------------------------------------------------------------------------------*/

/*В JS есть встроенный объект "Date", который содержит дату и время, а также предоставляет методы управления ими.*/

/*Создание объекта типа "Date" без параметров даст нам объект типа "Date" с текущими датой и временем.*/
let date01 = new Date();
console.log(date01);

/*Создание объекта типа "Date" c одним параметром в виде количества миллисекунд даст нам объект типа "Date" с временем, 
равным количеству миллисекунд, прошедших с 1 января 1970 года UTC+0. Указанный параметр называют "таймстамп".*/
let date02 = new Date(0);
console.log(date02); // Thu Jan 01 1970
let date03 = new Date(1000 * 60 * 60 * 24);
console.log(date03); // Fri Jan 02 1970
console.log(date03 - date02); // 86 400 000 миллисекунд

/*Чтобы создать дату меньшую чем 1970 год можно использовать отрицательный таймстамп.*/
let date04 = new Date(-24 * 60 * 60 * 1000);
console.log(date04); // Wed Dec 31 1969

/*Также в качестве параметра можно отдать строковое представления даты.*/
let date05 = new Date('2007-01-01');
console.log(date05); // Mon Jan 01 2007

/*Используя несколько параметров можно создать объект типа "Date" с заданными компонентами в местном часовом поясе.
Обязательны только первые два аргумента. Особенности:
1) "year" должен состоять из четырех цифр. Для совместимости также принимаются 2 цифры и рассматриваются как 19xx, к 
примеру, 98 здесь это тоже самое, что и 1998, но настоятельно рекомендуется всегда использовать 4 цифры.
2) "month" начинается с 0 (январь) по 11 (декабрь).
3) Параметр "date" здесь представляет собой день месяца. Если параметр не задан, то принимается значение 1.
4) Если параметры "hours"/"minutes"/"seconds"/"ms" отсутствуют, их значением становится 0.*/

let date06 = new Date(2009, 0, 15, 3, 25, 2, 471);
console.log(date06); // Thu Jan 15 2009 03:25:02

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Существуют методы получения года, месяца и так далее из объекта типа "Date".*/
let date07 = new Date(2023, 3, 1, 3, 25, 2, 471);
console.log(date07.getFullYear()); // 2023
console.log(date07.getMonth()); // 3
console.log(date07.getDate()); // 1
console.log(date07.getHours()); // 3
console.log(date07.getMinutes()); // 25
console.log(date07.getSeconds()); // 2
console.log(date07.getMilliseconds()); // 471
console.log(date07.getYear()); // 123, устаревший метод, который порой возвращает год в виде двух цифр.
console.log(date07.getDay()); // 6
console.log(date07.getUTCFullYear()); // 2023 UTC+0
console.log(date07.getUTCMonth()); // 3 UTC+0
console.log(date07.getUTCDay()); // 6 UTC+0
console.log(date07.getTime()); // 1 680 308 702 471, количество миллисекунд, прошедших с 1 января 1970 года UTC+0.
/*Метод "getTimezoneOffset()" выводит разницу в минутах между UTC и местным часовым поясом. Если вы в часовом поясе 
UTC-1, то выводится 60, а если вы в часовом поясе UTC+3, выводится -180.*/
console.log(date07.getTimezoneOffset()); // - 180

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Следующие методы позволяют установить компоненты даты и времени:
1) "setFullYear(year, [month], [date])".
2) "setMonth(month, [date])".
3) "setDate(date)".
4) "setHours(hour, [min], [sec], [ms])".
5) "setMinutes(min, [sec], [ms])".
6) "setSeconds(sec, [ms])".
7) "setMilliseconds(ms)".
8) "setTime(milliseconds)" (устанавливает дату в виде целого количества миллисекунд, прошедших с 01.01.1970 UTC).

У всех этих методов, кроме "setTime()", есть UTC-вариант, например, "setUTCHours()".*/
let date08 = new Date();
console.log(date08);
date08.setHours(0, 0, 0, 0);
console.log(date08);

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Неправильные компоненты даты автоматически распределяются по остальным.*/
let date09 = new Date(2016, 1, 28);
date09.setDate(date09.getDate() + 2);
console.log(date09); // Tue Mar 01 2016

let date10 = new Date(2016, 0, 1);
date10.setDate(0);
console.log(date10); // Thu Dec 31 2015
console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Если объект типа "Date" преобразовать в число, то получим таймстамп по аналогии с "date.getTime()".*/
let date11 = new Date();
console.log(+date11);

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Следующим образом можно измерять время, которое заняла какая-то операция.*/
let date12 = new Date();
for (let i = 0; i < 30_000_000; i++) { let a = i * i * i };
let date13 = new Date();
console.log(date13 - date12); // Находим сколько работал цикл "for".

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Mетод "Date.now()" возвращает текущую метку времени. Семантически он эквивалентен "new Date().getTime()", однако 
метод "Date.now()" не создает промежуточный объект типа "Date". Так что этот способ работает быстрее и не нагружает 
сборщик мусора.*/
let date14 = Date.now();
for (let i = 0; i < 30_000_000; i++) { let a = i * i * i };
let date15 = Date.now();
console.log(date15 - date14); // Находим сколько работал цикл "for".

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Сравним две функции, вычисляющие разницу между двумя датами. Обе функции делают буквально одно и то же, только одна 
использует явный метод "date.getTime()" для получения даты в миллисекундах, а другая полагается на преобразование даты 
в число. Результат их работы всегда один и тот же.*/
function diffSubtract(date1, date2) { return date2 - date1 };
function diffGetTime(date1, date2) { return date2.getTime() - date1.getTime() };

function bench(f) {
    let date1 = new Date(0);
    let date2 = new Date();

    let start = Date.now();
    for (let i = 0; i < 100000; i++) f(date1, date2);
    let end = Date.now();
    return end - start;
};

/*Метод "getTime()" работает ощутимо быстрее потому, что не производится преобразование типов, и интерпретаторам такое 
намного легче оптимизировать. Но представьте, что при выполнении функции "bench(diffSubtract)" процессор параллельно 
делал что-то еще, также потребляющее ресурсы. А к началу выполнения функции "bench(diffGetTime)" он это уже завершил.
В итоге у первого бенчмарка окажется меньше ресурсов процессора, чем у второго. Это может исказить результаты.*/
console.log('Время diffSubtract: ' + bench(diffSubtract) + 'мс');
console.log('Время diffGetTime: ' + bench(diffGetTime) + 'мс');

/*Для получения наиболее достоверных результатов тестирования производительности весь набор бенчмарков нужно запускать 
по нескольку раз.*/
let time1 = 0;
let time2 = 0;

/*Современные интерпретаторы JavaScript начинают применять продвинутые оптимизации только к "горячему коду", 
выполняющемуся несколько раз (незачем оптимизировать то, что редко выполняется). Так что в примере выше первые запуски 
не оптимизированы должным образом. Нелишним будет добавить предварительный запуск для "разогрева".*/
bench(diffSubtract);
bench(diffGetTime);

for (let i = 0; i < 10; i++) {
    time1 += bench(diffSubtract);
    time2 += bench(diffGetTime);
};

console.log('Итоговое время diffSubtract: ' + time1 + 'мс');
console.log('Итоговое время diffGetTime: ' + time2 + 'мс');

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Метод "Date.parse(str)" считывает дату из строки. Формат строки должен быть следующим: YYYY-MM-DDTHH:mm:ss.sssZ, где:
1) YYYY-MM-DD – это дата: год-месяц-день.
2) Символ "T" используется в качестве разделителя.
3) HH:mm:ss.sss – время: часы, минуты, секунды и миллисекунды.
4) Необязательная часть "Z" обозначает часовой пояс в формате +-hh:mm. Если указать просто букву Z, то получим UTC+0.

Возможны и более короткие варианты, например, YYYY-MM-DD или YYYY-MM, или даже YYYY.
Вызов метода "Date.parse(str)" обрабатывает строку в заданном формате и возвращает таймстамп (количество миллисекунд 
с 1 января 1970 года UTC+0). Если формат неправильный, возвращается NaN.*/

console.log(Date.parse('2012-01-26T13:51:50.417-07:00')); // 1327611110417 (таймстамп)

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*В браузерах есть метод "performance.now()", возвращающий количество миллисекунд с начала загрузки страницы с 
точностью до микросекунд.*/

console.log(`Загрузка началась ${performance.now()}мс назад`);