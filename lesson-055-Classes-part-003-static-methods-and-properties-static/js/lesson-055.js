'use strict';

/*-------------------------------------------------------------------------------------------------------------------*/

/*Мы также можем присвоить метод самому классу. Такие методы называются статическими.*/
class Class01 {
    method01() { console.log(1) }; // этот метод будет в Class01.prototype
    static method02() { console.log(2) }; // этот метод будет в Class01
};

// Class01.method02 = function (a) { console.log(2) }; // Еще один способ создать статический метод

Class01.method02(); // 2

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Статические свойства также возможны, они выглядят как свойства класса, но с static в начале.*/
class Class02 {
    constructor() {
        this.a = 1; // Будет свойством в экземпляре данных
    };

    b = 2; // Будет свойством в экземпляре данных

    static c = 3; // Будет статическим свойством в Class02
};

// Class02.с = 3; // Еще один способ создать статическое свойство

let obj01 = new Class02();
console.log(obj01); // Object { b: 2, a: 1 }
console.log(Class02.c); // 3

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Статические методы классов-завещателей наследуются классами-наследниками.*/
class Class03 {
    static method01() { console.log(1) };
};

class Class04 extends Class03 {
    method02() { console.log(2) };
};

Class04.method01(); // 1, Class04 => Class04.__proto__ => Class03