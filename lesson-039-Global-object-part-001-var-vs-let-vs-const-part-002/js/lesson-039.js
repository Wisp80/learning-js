'use strict';

/*-------------------------------------------------------------------------------------------------------------------*/

/*Глобальный объект в браузере называется "window", в Node.js — "global", в другой среде исполнения может называться 
иначе. Недавно "globalThis" был добавлен в язык как стандартизированное имя для глобального объекта, которое должно 
поддерживаться в любом окружении. Он поддерживается во всех основных браузерах.*/

/*В браузере глобальные функции и переменные, объявленные с помощью var (не let/const), становятся свойствами 
глобального объекта. То же самое касается функций, объявленных с помощью синтаксиса Function Declaration.*/
var var01 = 1;
let let01 = 2;
function func01() { };
console.log(window.var01); // 1
console.log(globalThis.var01); // 1
console.log(window.let01); // undefined
console.log(globalThis.let01); // undefined
console.log(window.func01); // function func01()
console.log(globalThis.func01); // function func01()

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Глобальный объект можно использовать, чтобы проверить поддержку современных возможностей языка. Например, проверить 
наличие встроенного объекта Promise (такая поддержка отсутствует в очень старых браузерах). Если нет, то мы можем 
создать полифил: добавить функции, которые не поддерживаются окружением, но существуют в современном стандарте.*/
if (!window.Promise) {
    console.log('Your browser does not support Promises');
    window.Promise = {} // собственная реализация современной возможности языка
};