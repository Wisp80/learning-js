'use strict';

/*-------------------------------------------------------------------------------------------------------------------*/

/*Обработчики промисов "then()"/"catch()"/"finally()" всегда асинхронны, то есть срабатывает только после того, как
весь "синхронный" код отработал.*/
let promise01 = Promise.resolve();
console.log(1);

promise01
    .then(
        (result) => {
            console.log(2);
        }
    )
    .then(
        (result) => {
            console.log(3);
        }
    );

console.log(4); // 1 => 3 => 2

/*Асинхронные задачи попадают в специальную очередь микрозадач (PromiseJobs/microtask queue). Это очередь работает
по принципу FIFO: первым пришел - первым вышел. Выполнение микрозадач, то есть их попадание в callstack, происходит 
только в том случае, если ничего больше не запущено в callstack'е. 

Проще говоря, когда промис выполнен, его обработчики "then()"/"catch()"/"finally()" попадают в эту очередь микрозадач.
После этого они сразу не выполняются, так как движок JavaScript берет задачу из очереди микрозадач и выполняет ее 
только тогда, когда он освободится от выполнения текущего "синхронного" кода.*/

/*Если есть цепочка с несколькими обработчиками "then()"/"catch()"/"finally()", то каждый из них выполняется 
асинхронно. То есть сначала каждый из них ставится в очередь микрозадач, а потом выполняется, когда выполнение текущего 
"синхронного" кода завершено и добавленные ранее в очередь обработчики выполнены.*/

/*-------------------------------------------------------------------------------------------------------------------*/

/*"Необработанная ошибка" возникает в случае, если ошибка промиса не обрабатывается в конце очереди микрозадач. 
Событие "unhandledrejection" возникает, когда очередь микрозадач завершена: движок проверяет все промисы и, если 
какой-либо из них в состоянии "rejected", то генерируется это событие "unhandledrejection".*/
window.addEventListener('unhandledrejection', event => {
    console.log(event.reason); // 'error01' не увидим, 'error02' увидим
});

/*Здесь ошибка перехвачена обработчиком "catch()", поэтому событие "unhandledrejection" не срабатывает. Событие
"unhandledrejection" не срабатывает потому, что к его моменту в очереди микрозадач есть обработчик, который будет
заниматься обработкой ошибкой промиса.*/
let promise02 = Promise.reject(new Error('error01'));
promise02.catch(err => console.log('caught01'));

/*Здесь ошибка перехвачена событием "unhandledrejection", так как обработчик "catch()" сработает спустя 2 секунды. 
Здесь событие "unhandledrejection" срабатывает потому, что к его моменту в очереди микрозадач еще нет обработчика, 
который бы занялся обработкой ошибкой промиса.*/
let promise03 = Promise.reject(new Error('error02'));
setTimeout(() => promise03.catch(err => console.log('caught02')), 2000); // Увидим после 'error02'