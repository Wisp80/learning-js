'use strict';

/*-------------------------------------------------------------------------------------------------------------*/

/*По спецификации, в качестве ключей для свойств объекта могут использоваться только строки или символы. Ни 
числа, ни логические значения не подходят, разрешены только эти два типа данных.*/

/*Символы это уникальные идентификаторы. Символ создается при помощи встроенной функции "Symbol()". При создании
симсвола ему можно дать имя.*/

let symb1 = Symbol('a');
let symb2 = Symbol('a');

console.log(symb1 === symb2); // false

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------*/

/*Символы автоматически не преобразуются в строки.*/

// alert(symb1); // Cannot convert a Symbol value to a string
// alert(symb1.toString()); // 'Symbol(a)'
console.log(symb1);
console.log(symb2);

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------*/

/*Если мы хотим использовать символ при литеральном объявлении объекта {...}, его необходимо заключить в 
квадратные скобки.*/

let symb3 = Symbol('b');

let obj1 = {
    [symb3]: 2
};

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------*/

/*Свойства, чьи ключи – символы, не перебираются циклом for..in.*/

let symb4 = Symbol('c');

let obj2 = {
    a: 1,
    [symb4]: 2,
    c: 3
};

for (const key in obj2) {
    console.log(key);
    console.log(obj2[key]);
};

/*А вот "Object.assign()", в отличие от цикла for..in, копирует и строковые, и символьные свойства.*/

let symb5 = Symbol('d');

let obj3 = {
    [symb5]: 1
};

let obj4 = Object.assign({}, obj3);

console.log(obj3[symb5]); // 1

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------*/

/*Иногда мы хотим, чтобы символы с одинаковыми именами были одной сущностью. Например, разные части нашего 
приложения хотят получить доступ к символу "6", подразумевая именно одно и то же свойство. Для этого существует 
глобальный реестр символов. Мы можем создавать в нем символы и обращаться к ним позже, и при каждом обращении нам 
гарантированно будет возвращаться один и тот же символ. Для чтения (или, при отсутствии, создания) символа из 
реестра используется вызов метода "Symbol.for(key)". Он проверяет глобальный реестр и, при наличии в нем символа 
с именем key, возвращает его, иначе же создается новый символ "Symbol(key)" и записывается в реестр под ключом 
"key".*/

let symb6 = Symbol.for('6');
let symb7 = Symbol.for('6');

console.log(symb6 === symb7);

/*Символы, содержащиеся в реестре, называются глобальными символами. Если вам нужен символ, доступный везде в 
коде – используйте глобальные символы.*/