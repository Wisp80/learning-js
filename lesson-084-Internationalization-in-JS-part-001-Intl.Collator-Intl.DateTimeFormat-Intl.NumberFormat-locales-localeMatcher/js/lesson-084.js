'use strict';

/*-------------------------------------------------------------------------------------------------------------------*/

/*Общая проблема строк, дат, чисел в JavaScript - они "не в курсе" языка и особенностей стран, где находится 
посетитель. Все современные браузеры, кроме IE10 (но есть библиотеки и для него) поддерживают стандарт ECMA 402, 
предназначенный решить эти проблемы навсегда.*/

/*Основные конструкторы для решения указанной проблемы.

1) "Intl.Collator" - умеет правильно сравнивать и сортировать строки.
2) "Intl.DateTimeFormat" - умеет форматировать дату и время в соответствии с нужным языком.
3) "Intl.NumberFormat" - умеет форматировать числа в соответствии с нужным языком.*/

/*-------------------------------------------------------------------------------------------------------------------*/

/*Локаль - это первый и самый важный аргумент всех методов, связанных с интернационализацией. Локаль описывается 
строкой из трех компонентов, которые разделяются дефисом:
1) Код языка.
2) Код способа записи.
3) Код страны.

На практике не всегда указаны три, обычно меньше:
1) "ru" - русский язык, без уточнений.
2) "en-GB" - английский язык, используемый в Англии (GB).
3) "en-US" - английский язык, используемый в США (US).
4) "zh-Hans-CN" - китайский язык (zh), записываемый упрощенной иероглифической письменностью (Hans), используемый в 
Китае.

Также через суффикс "-u-*" можно указать расширения локалей, например "th-TH-u-nu-thai" - это тайский язык ("th"), 
используемый в Таиланде ("TH"), с записью чисел тайскими буквами (๐, ๑, ๒, ๓, ๔, ๕, ๖, ๗, ๘, ๙).*/

/*Стандарт, который описывает локали - RFC 5646, языки описаны в IANA language registry.*/

/*Все методы принимают локаль в виде строки или массива, содержащего несколько локалей в порядке предпочтения. Если
локаль не указана или undefined, то берется локаль по умолчанию, установленная в окружении.*/

/*"localeMatcher" - вспомогательная настройка, которую тоже можно везде указать, она определяет способ подбора локали,
если желаемая недоступна. У него два значения:

1) "lookup" - означает простейший порядок поиска путем обрезания суффикса, например "zh-Hans-CN" → "zh-Hans" → "zh" → "локаль по умолчанию".
2) "best fit" - использует встроенные алгоритмы и предпочтения окружения для выбора подходящей локали.

По умолчанию стоит "best fit".

Если локалей несколько, например ["zh-Hans-CN", "ru-RU"] то "localeMatcher" пытается подобрать наиболее подходящую 
локаль для первой из списка (китайская), если не получается - переходит ко второй (русской) и так далее. Если ни одной
не нашел, например на компьютере не совсем поддерживается ни китайский ни русский, то используется локаль по умолчанию.

Как правило, "best fit" является здесь наилучшим выбором.*/

/*-------------------------------------------------------------------------------------------------------------------*/

/*Рассмотрим конструктор "Intl.Collator". Первым параметром он принимает локаль, одну или массив в порядке 
предпочтения. Вторым необязательным параметром принимает объект с дополнительными настройками:

1) localeMatcher - алгоритм выбора подходящей локали.
2) usage - цель сравнения: сортировка "sort" или поиск "search", по умолчанию "sort".
3) sensitivity - чувствительность: какие различия в символах учитывать, а какие - нет, варианты:
        а) base - учитывать только разные символы, без диакритических знаков и регистра, например: а ≠ б, е = ё, а = А.
        б) accent - учитывать символы и диакритические знаки, например: а ≠ б, е ≠ ё, а = А.
        в) case - учитывать символы и регистр, например: а ≠ б, е = ё, а ≠ А.
        г) variant - учитывать все: символ, диакритические знаки, регистр, например: а ≠ б, е ≠ ё, а ≠ А, используется 
        по умолчанию.
4) ignorePunctuation - игнорировать знаки пунктуации: true/false, по умолчанию false.
5) numeric - использовать ли численное сравнение: true/false, если true, то будет 12 > 2, иначе 12 < 2.
6) caseFirst - в сортировке должны идти первыми прописные или строчные буквы, варианты: "upper" (прописные), "lower" 
(строчные) или "false" (стандартное для локали, также является значением по умолчанию). Не поддерживается IE11.*/
let collator01 = new Intl.Collator();
console.log('ё' > 'я'); // true, то есть "ё" больше
console.log(collator01.compare('ё', 'я')); // -1, то есть "ё" меньше

let collator02 = new Intl.Collator(undefined, { sensitivity: 'accent' });
console.log(collator01.compare('Ё', 'ё')); // 1, то есть "Ё" больше
console.log(collator02.compare('Ё', 'ё')); // 0, то есть "Ё" и "ё" равны

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Рассмотрим конструктор "Intl.DateTimeFormat". Первым параметром он принимает локаль, одну или массив в порядке 
предпочтения. Вторым необязательным параметром принимает объект с дополнительными настройками, в котором мы можем 
определить, какие именно части даты показывать и в каком формате:

Свойство 	        Описание 	                                Возможные значения 	                                По умолчанию

localeMatcher 	    Алгоритм подбора локали 	                lookup, best fit 	                                best fit
formatMatcher 	    Алгоритм подбора формата 	                basic, best fit 	                                best fit
hour12 	            Включать ли время в 12-часовом формате 	    true -- 12-часовой формат, false -- 24-часовой 	
timeZone 	        Временная зона 	                            Временная зона, например Europe/Moscow 	            UTC
weekday 	        День недели 	                            narrow, short, long 	
era 	            Эра 	                                    narrow, short, long 	
year 	            Год 	                                    2-digit, numeric 	                                undefined или numeric
month 	            Месяц 	                                    2-digit, numeric, narrow, short, long 	            undefined или numeric
day 	            День 	                                    2-digit, numeric 	                                undefined или numeric
hour 	            Час 	                                    2-digit, numeric 	
minute 	            Минуты 	                                    2-digit, numeric 	
second 	            Секунды 	                                2-digit, numeric 	
timeZoneName 	    Название таймзоны (нет в IE11) 	            short, long

Все локали обязаны поддерживать следующие наборы настроек:

1) weekday, year, month, day, hour, minute, second
2) weekday, year, month, day
3) year, month, day
4) year, month
5) month, day
6) hour, minute, second

Если указанный формат не поддерживается, то настройка "formatMatcher" задает алгоритм подбора наиболее близкого формата:
"basic" - по стандартным правилам, и "best fit" - по умолчанию, на усмотрение окружения.*/
let date01 = new Date(2007, 11, 1, 12, 45, 0);

let dateFormatter01 = new Intl.DateTimeFormat('ru');
console.log(dateFormatter01.format(date01)); // "01.12.2007"

let dateFormatter02 = new Intl.DateTimeFormat('en-US');
console.log(dateFormatter02.format(date01)); // "12/1/2007"

let dateFormatter03 = new Intl.DateTimeFormat('ru', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
});

console.log(dateFormatter03.format(date01)); // "суббота, 1 декабря 2007 г."

let dateFormatter04 = new Intl.DateTimeFormat('ru', {
    hour: 'numeric',
    minute: 'numeric',
    second: 'numeric'
});

console.log(dateFormatter04.format(date01)); // "12:45:00"

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Рассмотрим конструктор "Intl.NumberFormat". Первым параметром он принимает локаль, одну или массив в порядке 
предпочтения. Вторым необязательным параметром принимает объект с дополнительными настройками:

Свойство 	                Описание 	                                                                            Возможные значения 	                    По умолчанию

localeMatcher 	            Алгоритм подбора локали 	                                                            lookup, best fit 	                    best fit
style 	                    Стиль форматирования 	                                                                decimal, percent, currency 	            decimal
currency 	                Алфавитный код валюты 	                                                                См. Список кодов валюты, например USD 	
currencyDisplay 	        Показывать валюту в виде кода, локализованного символа или локализованного названия 	code, symbol, name 	                    symbol
useGrouping 	            Разделять ли цифры на группы 	                                                        true, false 	                        true
minimumIntegerDigits 	    Минимальное количество цифр целой части 	                                            от 1 до 21 	                            21
minimumFractionDigits 	    Минимальное количество десятичных цифр 	                                                от 0 до 20 	                            для чисел и процентов 0, для валюты зависит от кода.
maximumFractionDigits 	    Максимальное количество десятичных цифр 	                                            от minimumFractionDigits до 20. 	    для чисел max(minimumFractionDigits, 3), для процентов 0, для валюты зависит от кода.
minimumSignificantDigits 	Минимальное количество значимых цифр 	                                                от 1 до 21 	                            1
maximumSignificantDigits 	Максимальное количество значимых цифр 	                                                от minimumSignificantDigits до 21 	    21*/
let numberFormatter01 = new Intl.NumberFormat('ru');
console.log(numberFormatter01.format(42351253455.789)); //  "42 351 253 455,789"

let numberFormatter02 = new Intl.NumberFormat('ru', { maximumSignificantDigits: 3 });
console.log(numberFormatter02.format(42351253455.789)); // "42 400 000 000"

let numberFormatter03 = new Intl.NumberFormat('ru', {
    style: 'currency',
    currency: 'GBP'
});

console.log(numberFormatter03.format(4231.6)); // "4 231,60 £"

let numberFormatter04 = new Intl.NumberFormat('ru', {
    style: 'currency',
    currency: 'GBP',
    minimumFractionDigits: 2
});

console.log(numberFormatter04.format(4231.6)); // "4 231,60 £"

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Методы форматирования также поддерживаются в обычных строках, датах, числах.*/

/*Метод "localeCompare()" сравнивает строку с другой, с учетом локали.*/
console.log('ё'.localeCompare('я', 'ru')); // -1

/*Метод "toLocaleString()" форматирует дату в соответствии с локалью.*/
let date02 = new Date(2007, 11, 1, 12, 45, 0);
console.log(date02.toLocaleString('ru', { year: 'numeric', month: 'long' })); // "декабрь 2007 г."

/*Метод "toLocaleDateString()" делает то же, что и выше, но опции по умолчанию включают в себя год, месяц, день.*/

/*Метод "toLocaleTimeString()" делает то же, что и выше, но опции по умолчанию включают в себя часы, минуты, секунды.*/

/*Метод "toLocaleString()" форматирует число, используя опции конструктора "Intl.NumberFormat".*/

/*Все эти методы при запуске создают соответствующий объект "Intl" и передают ему опции.*/