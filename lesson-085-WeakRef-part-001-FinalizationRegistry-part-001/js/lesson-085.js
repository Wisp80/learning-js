'use strict';

/*-------------------------------------------------------------------------------------------------------------------*/

/*Сильная ссылка - это ссылка на объект или значение, которая предотвращает их удаление сборщиком мусора.*/

/*Слабая ссылка - это ссылка на объект или значение, которая не предотвращает их удаление сборщиком мусора.*/

/*"WeakRef" - это объект, содержащий слабую ссылку на другой объект, называемый "target" или "referent". Метод 
"deref()" возвращает объект-референт, на который ссылается "WeakRef", в случае, если объект все еще находится в памяти.
Если объект был удален сборщиком мусора, то метод "deref()" вернет undefined.*/
let obj01 = { a: 1 };
let weakRef01 = new WeakRef(obj01);
obj01 = undefined;
console.log(weakRef01); // WeakRef {  }

/*До тех пор, пока объект фактически не уничтожен, слабая ссылка может вернуть его, даже если на данный объект больше
нет сильных ссылок. То есть наш объект становится своеобразным "котом Шредингера" - мы не можем знать точно, "жив" он
или "мертв".*/
console.log(weakRef01.deref()); // Object { a: 1 }

/*"WeakRef" обычно используется для создания кешей или ассоциативных массивов, в которых хранятся ресурсоемкие 
объекты.*/

console.log('--------------------------------------');

/*-------------------------------------------------------------------------------------------------------------------*/

/*Колбэк очистки (финализатор) - это функция, которая выполняется в случае, если объект, зарегистрированный в 
"FinalizationRegistry", удаляется из памяти сборщиком мусора. Его целью является предоставить возможность выполнения 
дополнительных операций, связанных с объектом, после его окончательного удаления из памяти.*/

/*Реестр (или "FinalizationRegistry") - это специальный объект в JavaScript, который управляет регистрацией и отменой
регистрации объектов и их колбэков очистки. Этот механизм позволяет зарегистрировать объект для отслеживания и связать
с ним колбэк очистки. Это структура, которая хранит информацию о зарегистрированных объектах и их колбэках очистки, а
затем автоматически вызывает эти колбэки при удалении объектов из памяти.*/

/*Для создания экземпляра реестра "FinalizationRegistry", необходимо вызвать его конструктор, который принимает 
единственный аргумент - колбэк очистки (финализатор).*/

/*Колбэк очистки принимает значение "heldValue", которое передается в качестве аргумента. Если это значение является 
объектом, то реестр сохраняет на него сильную ссылку.*/

/*"FinalizationRegistry" предоставляет следующие методы:

1)"register(target, heldValue [, unregisterToken])" - этот метод используется для регистрации объектов в реестре. 
"target" - это регистрируемый для отслеживания объект. Если "target" будет удален сборщиком мусора, то колбэк очистки
будет вызван со значением "heldValue" в качестве аргумента. Опциональный параметр "unregisterToken" - это токен отмены
регистрации. Может быть передан для отмены регистрации до удаления объекта сборщиком мусора. Обычно в качестве 
"unregisterToken" используется объект "target", что является стандартной практикой.

2)"unregister(unregisterToken)" - это метод, который используется для отмены регистрации объекта в реестре. Он принимает
один аргумент - токен отмены регистрации, который был получен при регистрации объекта.*/
let obj02 = { b: 2 };
let weakRef02 = new WeakRef(obj02);

function finalizer01(heldValue) { console.log(`${heldValue} has been removed`) };

const finalizationRegistry01 = new FinalizationRegistry(finalizer01);

finalizationRegistry01.register(obj02, obj02.b); // target, heldValue

/*Когда объект obj02 удалится сборщиком мусора, в консоль будет выведено сообщение: "2 has been removed."*/
obj02 = null;

/*Скорее всего, механизм "FinalizationRegistry" ускоряет работу сборщика мусора.*/
setTimeout(() => { console.log(weakRef01.deref()); }, 20000); // Object { a: 1 }
setTimeout(() => { console.log(weakRef02.deref()); }, 20000); // undefined

setTimeout(() => { console.log(weakRef01.deref()); }, 60000); // Object { a: 1 }
setTimeout(() => { console.log(weakRef01.deref()); }, 300000); // Object { a: 1 }